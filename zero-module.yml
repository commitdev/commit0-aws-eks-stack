name: zero-aws-eks-stack
description: 'zero module for an AWS kubernetes stack on EKS'
author: 'Commit'

template:
  strictMode: true
  delimiters:
    - '<%'
    - '%>'
  inputDir: 'templates'
  outputDir: 'infrastructure'

requiredCredentials:
  - aws
  - github

parameters:
  - field: region
    label: Select AWS Region
    options:
      - "us-west-2"
      - "us-east-1"
      - "us-east-2"
  - field: productionHostRoot
    label: Production Root Host Name (e.g. mydomain.com) - this must be the root of the chosen domain, not a subdomain.
    fieldValidation:
      type: regex
      value: '^([a-z0-9]+(-[a-z0-9]+)*\.{1})+[a-z]{2,}$'
      errorMessage: Invalid root domain name
  - field: productionFrontendSubdomain
    label: Production Frontend Host Name (e.g. app.)
    default: app.
    fieldValidation:
      type: regex
      value: '^([a-z0-9]+(-[a-z0-9]+)*\.)$'
      errorMessage: Invalid subdomain (cannot contain special chars & must end with a '.')
  - field: productionBackendSubdomain
    label: Production Backend Host Name (e.g. api.)
    default: api.
    fieldValidation:
      type: regex
      value: '^([a-z0-9]+(-[a-z0-9]+)*\.)$'
      errorMessage: Invalid subdomain (cannot contain special chars & must end with a '.')
  - field: stagingHostRoot
    label: Staging Root Host Name (e.g. mydomain-staging.com) - this must be the root of the chosen domain, not a subdomain.
    fieldValidation:
      type: regex
      value: '^([a-z0-9]+(-[a-z0-9]+)*\.{1})+[a-z]{2,}$'
      errorMessage: Invalid root domain name
  - field: stagingFrontendSubdomain
    label: Staging Frontend Host Name (e.g. app.)
    default: app.
    fieldValidation:
      type: regex
      value: '^([a-z0-9]+(-[a-z0-9]+)*\.)$'
      errorMessage: Invalid subdomain (cannot contain special chars & must end with a '.')
  - field: stagingBackendSubdomain
    label: Staging Backend Host Name (e.g. api.)
    default: api.
    fieldValidation:
      type: regex
      value: '^([a-z0-9]+(-[a-z0-9]+)*\.)$'
      errorMessage: Invalid subdomain (cannot contain special chars & must end with a '.')
  - field: database
    label: Database engine to use (postgres)
    options:
      - "postgres"
      - "mysql"
  - field: cacheStore
    label: "Cache store to use (default: no cache)"
    options:
      - "none"
      - "redis"
      - "memcached"
  - field: loggingType
    label: Application logging to configure. Cloudwatch is cheaper with a more limited feature set. Elasticsearch + Kibana will set up more infrastructure but enable a much richer logging search and visualization experience.
    options:
      - "cloudwatch"
      - "kibana"
  - field: metricsType
    label: Additional application metrics method to configure. Metrics are available through CloudWatch, but choosing prometheus will install Prometheus and Grafana, for a richer metrics experience. No additional infrastructure is required, but a number of prometheus pods will need to exist in the cluster, utilizing some resources.
    options:
      - "none"
      - "prometheus"
  - field: notificationServiceEnabled
    label: "Install the Zero Notification Service in your cluster?"
    info: Provides easy notification capability through email, slack, etc. - https://github.com/commitdev/zero-notification-service
    default: yes
    options:
      - "yes"
      - "no"
  - field: sendgridApiKey
    label: "API key to setup email integration (optional: leave blank to opt-out of Sendgrid setup)"
    info: Signup at https://signup.sendgrid.com or create an API key at https://app.sendgrid.com/settings/api_keys - Sendgrid is an email delivery service enabling transactional email sending and more.
  - field: notificationServiceSlackApiKey
    label: "API key of your Slack bot if you want to use Slack with the Zero Notification Service. Leave blank if not applicable."
    info: See https://slack.com/intl/en-ca/help/articles/215770388-Create-and-regenerate-API-tokens
  - field: accountId
    label: AWS Account ID
    execute: aws sts get-caller-identity --query "Account" | tr -d '"'
  - field: eksWorkerAMI
    label: EKS Worker EC2 AMI ID
    execute: aws ssm get-parameters --names /aws/service/eks/optimized-ami/1.18/amazon-linux-2/recommended/image_id --region $region --query "Parameters[0].Value" | tr -d '"'
  - field: randomSeed
    label: Random seed that will be shared between projects to come up with deterministic resource names
    execute: uuidgen | head -c 8
  - field: fileUploads
    label: Enable file uploads using S3 and Cloudfront signed URLs? (Will require manual creation of a Cloudfront keypair in AWS)
    default: yes
    options:
      - "yes"
      - "no"
  - field: userAuth
    label: Enable user management using Kratos and authentication using the Oathkeeper access proxy?
    default: yes
    options:
      - "yes"
      - "no"
