
    # Re-tag messages based on patterns
    <match kubernetes.**>
      @type rewrite_tag_filter
      # Add a tag for nginx ingress
      <rule>
        key     $.kubernetes.container_name
        pattern ^nginx
        tag     logs.kubernetes.nginx
      </rule>
      # # Add a tag for your application - enable this and the blocks below if you want fluentd to manually control the structure of your logs
      # # Otherwise it will just parse out the structured json data and send it to elasticsearch
      # <rule>
      #   key     $.kubernetes.container_name
      #   pattern ^your-application
      #   tag     logs.kubernetes.yourapplication
      # </rule>      # Catch all (have to actually change the tag (add "logs.") otherwise there is an infinite loop)
      <rule>
        key     log
        pattern ^(.*)$
        tag     logs.${tag}
      </rule>
    </match>

    # # This allows us to parse log lines that have json separately, but still keep the unstructured ones
    # <match {logs.kubernetes.yourapplication}>
    #   @type rewrite_tag_filter
    #   # Add a tag for messages that didn't have parseable json
    #   <rule>
    #     key     log
    #     pattern /"message" *: *\{/
    #     tag     ${tag}.hasJson
    #   </rule>
    #   # Catch all
    #   <rule>
    #     key     log
    #     pattern ^(.*)$
    #     tag     ${tag}.noJson
    #   </rule>
    # </match>


    # Remove fields here we don't care to log
    <filter logs.kubernetes.**>
      @type record_transformer
      remove_keys $.docker.container_id, $.kubernetes.master_url, $.kubernetes.pod_id, $.kubernetes.namespace_id
    </filter>

    # # Separate out messages with json into another key called data
    # # message":{
    # <filter logs.kubernetes.*.hasJson>
    #   @type record_transformer
    #   enable_ruby
    #   <record>
    #       log ${record["log"].gsub(/"message" *: *\{/, '"data": {')}
    #   </record>
    # </filter>

    # Parse nested fields as json
    <filter logs.kubernetes.**>
      @id log_field_parser
      @type parser
      key_name log
      reserve_data true
      remove_key_name_field true
      # inject_key_prefix log.

      <parse>
        @type multi_format
        <pattern>
          format json
        </pattern>
        <pattern>
          format none
        </pattern>
      </parse>
    </filter>


    # Add common ECS fields for all kubernetes records
    <filter logs.kubernetes.**>
      @id k8s-to-ecs-format
      @type record_transformer
      enable_ruby
      <record>
        ecs.version 1.5.0
        cloud.instance.name ${record["kubernetes"]["host"]}
        container.image.name ${record["kubernetes"]["container_image"]}
        container.image.tag ${record["kubernetes"]["container_image_id"]}
      </record>
    </filter>

    # Reformat nginx ingress logs into ECS format
    <filter logs.kubernetes.nginx>
      @id nginx-to-ecs-format
      @type record_transformer
      enable_ruby
      <record>
        http.request.duration ${(record["log.request_time"].to_f*1000).round}
        http.request.method ${record["log.request_method"]}
        http.request.referrer ${record["log.http_referrer"]}
        http.request.bytes ${record["log.request_length"].to_i}
        http.response.bytes ${record["log.bytes_sent"].to_i}
        http.response.status_code ${record["log.status"].to_i}
        trace.id ${record["log.request_id"]}
        client.ip ${record["log.remote_addr"]}
        url.path ${record["log.path"]}
        url.query ${record["log.request_query"]}
        url.domain ${record["log.host"]}
        user_agent.original ${record["log.http_user_agent"]}
      </record>
    </filter>

    # # Reformat your application logs into ECS format
    # <filter logs.kubernetes.*.hasJson>
    #   @id application-to-ecs-format
    #   @type record_transformer
    #   enable_ruby
    #   <record>
    #     http.request.duration ${record["log.data"]["request_time_ms"].to_i}
    #     # See the nginx transformer for an example
    #   </record>
    # </filter>


    # # Uncomment these to make debugging easier by printing to stdout in fluentd
    # <match logs.kubernetes.nginx>
    #   @type stdout
    # </match>
    # <match {logs.kubernetes.*}>
    #   @type stdout
    # </match>
    # <match {logs.kubernetes.*.noJson}>
    #   @type stdout
    # </match>
